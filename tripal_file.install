<?php
/**
 * @file
 * Installation of the file module
 */

/**
 * Implements hook_disable().
 *
 * Perform actions when the module is disabled by the site administrator
 *
 * @ingroup tripal_file
 */
function tripal_file_disable() {



}

/**
 * Implements hook_requirements().
 *
 * Performs check to see if all required dependencies are met. Drupal will
 * automatically check for module dependencies but here you can check for
 * other requirements.
 *
 * @ingroup tripal_file
 */
function tripal_file_requirements($phase) {


  $requirements = array();
  if ($phase == 'install') {
    // EXPLANATION: It is essential that Chado be installed for almost all
    // Tripal modules. Therefore, the following code checks to ensure Chado
    // is installed and available.  If your module does not require that
    // Chado be installed, you can remove the following check.

    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['tripal_file'] = array(
          'title' => "tripal_file",
          'value' => "ERROR: Chado must be installed before this module can be enabled",
          'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Performs actions when the modules is first installed.
 *
 * @ingroup tripal_file
 */
function tripal_file_install() {

  // create the module's data directory
  tripal_create_files_dir('tripal_file');

  // EXPLANATION: Here is a good place to add any materialized views,
  tripal_file_add_mviews();

  // add any external databases used by the file module.
  tripal_file_add_dbs();

  // add any controlled vocabularies used by the file module. 
  tripal_file_add_cvs();


  // add any controlled vocabulary terms
  tripal_file_add_cvterms();

	// use the tripal_set_default_cv() function to specify
  // the Sequence Ontology (sequence) as the default vocabulary.
  tripal_set_default_cv('file', 'type_id', 'file_type');


  // add any custom tables. For this case we will add an 'file' table to the
  // chado schema
  tripal_file_add_custom_tables();
}


/**
 * Implements hook_uninstall().
 *
 * Performs actions when the modules is uninstalled.
 *
 * @ingroup tripal_file
 */
function tripal_file_uninstall() {

}

/**
 * Implementation of hook_schema().
 *
 * @ingroup tripal_file
 */
function tripal_file_schema() {


};

/**
 * Creates a materialized view that stores the type & number of files per organism
 *
 * @ingroup tripal_file
 */
function tripal_file_add_mviews() {


}
/**
 * Add cvs related to publications
 *
 * @ingroup tripal_file
 */
function tripal_file_add_dbs() {

}
/**
 * Add cvs related to publications
 *
 * @ingroup tripal_file
 */
function tripal_file_add_cvs() {

  // EXPLANATION: use the tripal_insert_cv() function to add any
  // controlled vocabularies, cv terms are sort of like the branches of 
  // cv.  
  
  tripal_insert_cv(
    'file_type',
    'Contains terms describing types of files.'
  );


}

/**
 * Adds controlled vocabulary terms needed by this module.
 *
 * @ingroup tripal_file
 */
function tripal_file_add_cvterms() {

  //Insert some terms for the file type cv
  tripal_insert_cvterm(array(
		'id'         => 'txt',         // the term accession
		'name'       => 'TXT',    // the human readable term name
		'cv_name'    => 'file_type', // the CV name this term belongs to.
		'definition' => 'Cuz I\'m T.X.T! I\'m dynamite!',
		//'db_name'    => 'file_db',   // the database in which the term is found.
	));
  
  tripal_insert_cvterm(array(
    	'id'         => 'fasta',         // the term accession
    	'name'       => 'FASTA',    // the human readable term name
    	'cv_name'    => 'file_type', // the CV name this term belongs to.
    	'definition' => 'Free Agents Symmetrically Testing Algea',
    //'db_name'    => 'file_db',   // the database in which the term is found.
  ));
  tripal_insert_cvterm(array(
  		'id'         => 'gff3',         // the term accession
  		'name'       => 'GFF3',    // the human readable term name
  		'cv_name'    => 'file_type', // the CV name this term belongs to.
  		'definition' => 'Girl Friend For Three',
  		//'db_name'    => 'file_db',   // the database in which the term is found.
  ));
  tripal_insert_cvterm(array(
  		'id'         => 'VCF',         // the term accession
  		'name'       => 'vcf',    // the human readable term name
  		'cv_name'    => 'file_type', // the CV name this term belongs to.
  		'definition' => 'Virtual Communist Files',
  		//'db_name'    => 'file_db',   // the database in which the term is found.
  ));
  tripal_insert_cvterm(array(
  		'id'         => 'bam',         // the term accession
  		'name'       => 'BAM',    // the human readable term name
  		'cv_name'    => 'file_type', // the CV name this term belongs to.
  		'definition' => 'Brotato As Man',
  		//'db_name'    => 'file_db',   // the database in which the term is found.
  ));
}

/**
 * Add custom tables to Chado that are required by this module
 *
 * @ingroup tripal_file
 */
function tripal_file_add_custom_tables() {


  tripal_file_add_file_table();
  tripal_file_add_file_source_table();
  tripal_file_add_file_prop_table();
  tripal_file_add_stock_file_table();
  tripal_file_add_feature_file_table();
  tripal_file_add_analysis_file_table();
  tripal_file_add_organism_file_table();
  
  //Do not believe these tables are needed.
  //tripal_file_add_fileprop_table();
  //tripal_file_add_file_relationship_table();
  //tripal_file_add_file_dbxref_table();
}
/**
 * A linker table for organisms and files
 * 
 */

/**
 * Adds the 'file' custom table to Chado.
 *
 * @ingroup tripal_file
 */
function tripal_file_add_file_table() {
	// EXPLANATION: use the Drupal Schema API to describe the custom table. Then
	// add the table using the chado_create_custom_table() function.
	$schema = array(
			'table' => 'file',
			'fields' => array(
				'file_id' => array(
					'type' => 'serial',
					'not null' => TRUE,
					),
				'type_id' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
				'description' => array(
					'type' => 'text',
					),
				'uri' => array(
					'type' =>'text',
					),
			),
			'primary key' => array(
			 	0 => 'file_id',
			),
	);
	
		chado_create_custom_table('file', $schema, TRUE);
}

function tripal_file_add_file_source_table(){
	$schema = array(
			'table' => 'file_source',
			'fields' => array(
				'file_source_id' => array(
					'type' => 'serial',
					'not null' => TRUE,
					),
				'file_id' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
				'contact_id' => array(
					'type' => 'int',
					),
				'license' => array(
					'type' => 'text',
					),
				'rank' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
			),
			'primary key' => array(
				0 => 'file_source_id',
			),
	);
	
		chado_create_custom_table('file_source', $schema, TRUE);
}

function tripal_file_add_file_prop_table(){
	$schema = array(
			'table' => 'file_prop',
			'fields' => array(
				'file_prop_id' => array(
					'type' => 'serial',
					'not null' => TRUE,
					),
				'file_id' => array (
					'type' => 'int',
					'not null' => TRUE,
					),
				'type_id' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
				'value' => array(
					'type' => 'text',
					),
			),
			'primary key' => array(
				0 => 'file_prop_id',
			),
	);
		chado_create_custom_table('file_prop', $schema, TRUE);
}

function tripal_file_add_stock_file_table(){
	$schema = array(
			'table' => 'stock_file',
			'fields' => array(
				'stock_file_id' => array(
					'type' => 'serial',
					'not null' => TRUE,
					),
				'file_id' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
				'stock_id' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
			),
			'primary key' => array(
				0 => 'stock_file_id',
			),
	);
	
		chado_create_custom_table('stock_file', $schema, TRUE);
}

function tripal_file_add_feature_file_table(){
	$schema = array(
			'table' => 'feature_file',
			'fields' => array(
				'feature_file_id' => array(
					'type' => 'serial',
					'not null' => TRUE,
					),
				'file_id' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
				'feature_id' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
			),
			'primary key' => array(
				0 => 'feauture_file_id',
			),
	);
	
		chado_create_custom_table('feature_file', $schema, TRUE);
}

function tripal_file_add_analysis_file_table(){
	
	$schema = array(
			'table' => 'analysis_file',
			'fields' => array(
				'analysis_file_id' => array(
					'type' => 'serial',
					'not null' => TRUE,
					),
				'file_id' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
				'analysis_id' => array(
					'type' => 'int',
					'not null' => TRUE,
					),
			),
			'primary key' => array(
				0 => 'analysis_file_id',
			),
	);
	
		chado_create_custom_table('analysis_file', $schema, TRUE);
}

function tripal_file_add_organism_file_table(){
	$schema = array(
		'table' => 'organism_file',
		'fields' => array(
		   'organism_file_id' => array(
		     'type' => 'serial',
			 'not null' => TRUE,
			  ),
		   'organism_id' => array(
			  'type' => 'int',
			  'not null' => TRUE,
			   ),
		   'file_id' => array(
   			  'type' => 'int',
		   	  'not_null'=> TRUE	
			    ),
			),
			'primary key' => array(
			  0 => 'organism_file_id',
			),
	);
	
		chado_create_custom_table('organism_file', $schema, TRUE);
}		







/**
 * This is the required update for tripal_file.
 */
function tripal_file_update_7200() {
  // EXPLANATION: as you create new releases of your module you may find that
  // tables your module created, or data may need to be adjusted. This function
  // allows you to do that. This function is executed using the
  // http://[your site]/update.php  URL or using the drush command 'updatedb'.
  // This function should be named according to the instructions provided here:
  // https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_update_N/7
  //
  // It is best not to use Tripal API calls inside of this function because an
  // upgarde from Drupal 6 to Drupal 7 requires that all modules be disabled
  // which means the Tripal API is not available.  This is an unfortunate
  // requirement, but will prevent errors during a major upgrade.

  // it is good to wrap any database changes inside of a try catch block:
  try {
   // perform database changes
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not apply updates: '. $error);
  }
}

/**
 * Implementation of hook_update_dependencies().  It specifies a list of
 * other modules whose updates must be run prior to this one.
 */
function tripal_file_update_dependencies() {
  $dependencies = array();

  // EXPLANATION: here we can specify which modules must be updated prior
  // to applying the updates in this module.  This is useful because it
  // prevents updates from being executed out of order.  The following
  // file code shows that the 'tripal_file' module update number 7200
  // must be executed after the 'tripal_cv' module's 7200 update.
  $dependencies['tripal_file'][7200] = array(
    'tripal_cv' => 7200
  );

  return $dependencies;
}
