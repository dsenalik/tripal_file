<?php
/**
 * @file
 * Installation of the file module
 */

/**
 * Implements hook_disable().
 *
 * Perform actions when the module is disabled by the site administrator
 *
 * @ingroup tripal_file
 */
function tripal_file_disable() {



}

/**
 * Implements hook_requirements().
 *
 * Performs check to see if all required dependencies are met. Drupal will
 * automatically check for module dependencies but here you can check for
 * other requirements.
 *
 * @ingroup tripal_file
 */
function tripal_file_requirements($phase) {


  $requirements = array();
  if ($phase == 'install') {
    // EXPLANATION: It is essential that Chado be installed for almost all
    // Tripal modules. Therefore, the following code checks to ensure Chado
    // is installed and available.  If your module does not require that
    // Chado be installed, you can remove the following check.

    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['tripal_file'] = array(
          'title' => "tripal_file",
          'value' => "ERROR: Chado must be installed before this module can be enabled",
          'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Performs actions when the modules is first installed.
 *
 * @ingroup tripal_file
 */
function tripal_file_install() {

  // EXPLANATION: If your module will making data publicly available for
  // download or use by the site you can create the directory using the
  // tripal_create_files_dir() function.  This will create a directory
  // in the public access directory which will typcially be in
  // sites/default/files/tripal/[module name]/

  // create the module's data directory
  tripal_create_files_dir('tripal_file');

  // EXPLANATION: Here is a good place to add any materialized views,
  // controlled vocabularies CV, databases or CV terms needed by your module.
  // To keep this module code short, create functions to do each of those
  // tasks

  // add any materialized view
  tripal_file_add_mviews();

  // add any external databases used by the file module.
  tripal_file_add_dbs();

  // add any controlled vocabularies used by the file module. You may need
  // to add a vocabulary if you to set it as default (see next lines of code).
  // For file, the Sequence Ontology (SO) is used by the feature module as the
  // default vocabulary for the feature type_id field.  But, that vocabulary
  // does not yet exist in Chado until after the SO is loaded using the
  // Tripal OBO loader.  But, we can add it here as a placeholder so that we can
  // then set it as a default vocabulary (see below).
  tripal_file_add_cvs();


  // add any controlled vocabulary terms
  tripal_file_add_cvterms();

  // EXPLANATION: Many tables in Chado have a 'type_id' column which allows for
  // association of controlled vocabulries to describe the record.   Chado
  // places no restrictions on which vocabularies can be used, but Tripal can
  // be instructed to provide a default vocabulary for any given field. For
  // file, the feature.type_id column will typically use the Sequence Ontology
  // In that case, we can use the tripal_set_default_cv() function to specify
  // the Sequence Ontology (sequence) as the default vocabulary.
  tripal_set_default_cv('file', 'type_id', 'file_type');
  tripal_set_default_cv('fileprop', 'type_id', 'file_property');
  tripal_set_default_cv('file_relationship', 'type_id', 'file_relationship');

  // add any custom tables. For this case we will add an 'file' table to the
  // chado schema
  tripal_file_add_custom_tables();
}


/**
 * Implements hook_uninstall().
 *
 * Performs actions when the modules is uninstalled.
 *
 * @ingroup tripal_file
 */
function tripal_file_uninstall() {

}

/**
 * Implementation of hook_schema().
 *
 * Provides a list of tables to be created inside of the Drupal schema
 * (the 'public' schema by default). It uses the Drupal Schema API
 * array structure to define the table, its indexes and constraints.
 *
 * Schema API documentation is here:
 * https://api.drupal.org/api/drupal/includes%21database%21schema.inc/group/schemaapi/7
 *
 * @ingroup tripal_file
 */
function tripal_file_schema() {

  // EXPLANATION: If your module creates a node type for data in the Chado
  // database then you probably need to link Drupal nodes with a respective
  // ID in the Chado table.  The following is an file array for a table
  // that will link the 'chado_file' node type (created by this file
  // module) with a record in the fake Chado file table.  This table
  // will link the 'nid' of the node with the 'file_id' of the eample
  // record.
 /*  $schema['chado_file'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
       ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
       ),
      'file_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
      'sync_date' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'UNIX integer sync date/time'
      ),
    ),
    'indexes' => array(
      'chado_file_idx1' => array('file_id')
    ),
    'unique keys' => array(
      'chado_file_uq1' => array('nid', 'vid'),
      'chado_file_uq2' => array('vid')
    ),
    'primary key' => array('nid'),
  );

  return $schema; */
};

/**
 * Creates a materialized view that stores the type & number of files per organism
 *
 * @ingroup tripal_file
 */
function tripal_file_add_mviews() {


}
/**
 * Add cvs related to publications
 *
 * @ingroup tripal_file
 */
function tripal_file_add_dbs() {
  // EXPLANATION: use the tripal_insert_db() function to add any
  // external databases needed by your module.  If the database already
  // exists then the function will gracefully return.
/* 
  tripal_insert_db(array(
    'name' => 'file_db',
    'description' => 'An file database.'
  )); */
}
/**
 * Add cvs related to publications
 *
 * @ingroup tripal_file
 */
function tripal_file_add_cvs() {

  // EXPLANATION: use the tripal_insert_cv() function to add any
  // controlled vocabularies, cv terms are sort of like the branches of 
  // cv.  
  
  tripal_insert_cv(
    'file_type',
    'Contains terms describing types of files.'
  );


}

/**
 * Adds controlled vocabulary terms needed by this module.
 *
 * @ingroup tripal_file
 */
function tripal_file_add_cvterms() {

  //Insert some terms for the file type cv
	tripal_insert_cvterm(array(
			'id'         => 'txt',         // the term accession
			'name'       => 'TXT',    // the human readable term name
			'cv_name'    => 'file_type', // the CV name this term belongs to.
			'definition' => 'txtualization',
			//'db_name'    => 'file_db',   // the database in which the term is found.
	));
  
  tripal_insert_cvterm(array(
    'id'         => 'fasta',         // the term accession
    'name'       => 'FASTA',    // the human readable term name
    'cv_name'    => 'file_type', // the CV name this term belongs to.
    'definition' => 'Free Agents Symmetrically Testing Algea',
    //'db_name'    => 'file_db',   // the database in which the term is found.
  ));
  tripal_insert_cvterm(array(
  		'id'         => 'gff3',         // the term accession
  		'name'       => 'GFF3',    // the human readable term name
  		'cv_name'    => 'file_type', // the CV name this term belongs to.
  		'definition' => 'Girl Friend For Three',
  		//'db_name'    => 'file_db',   // the database in which the term is found.
  ));
  tripal_insert_cvterm(array(
  		'id'         => 'VCF',         // the term accession
  		'name'       => 'vcf',    // the human readable term name
  		'cv_name'    => 'file_type', // the CV name this term belongs to.
  		'definition' => 'Virtual Communist Files',
  		//'db_name'    => 'file_db',   // the database in which the term is found.
  ));
  tripal_insert_cvterm(array(
  		'id'         => 'bam',         // the term accession
  		'name'       => 'BAM',    // the human readable term name
  		'cv_name'    => 'file_type', // the CV name this term belongs to.
  		'definition' => 'BAYUM',
  		//'db_name'    => 'file_db',   // the database in which the term is found.
  ));
}

/**
 * Add custom tables to Chado that are required by this module
 *
 * @ingroup tripal_file
 */
function tripal_file_add_custom_tables() {


  tripal_file_add_file_table();
  tripal_file_add_organism_file();
  //Do not believe these tables are needed.
  //tripal_file_add_fileprop_table();
  //tripal_file_add_file_relationship_table();
  //tripal_file_add_file_dbxref_table();
}
/*
 * A linker table for organisms and files
 * 
 */
function tripal_file_add_organism_file_table()
{
	$schema = array(
		'table' => 'organism_file',
		'fields' => array(
		   'organism_file_id' => array(
		     'type' => 'serial',
			 'not null' => TRUE,
			  ),
		   'organism_id' => array(
			  'type' => 'int',
			  'not null' => TRUE,
			   ),
		   'file_id' => array(
   			  'type' => 'int',
		   	  'not_null'=> TRUE	
			    ),
			),
			'primary key' => array(
					0 => 'organism_file_id',
			),
	);	//end table array
			chado_create_custom_table('file', $schema, TRUE);
	}		


/**
 * Adds the 'file' custom table to Chado.
 *
 * @ingroup tripal_file
 */
function tripal_file_add_file_table() {
  // EXPLANATION: use the Drupal Schema API to describe the custom table. Then
  // add the table using the chado_create_custom_table() function.
  $schema = array(
    'table' => 'file',
    'fields' => array(
      'file_id' => array(
        'type' => 'serial',
        'not null' => true,
      ),
      'type_id' => array(
        'type' => 'int',
        'not null' => true,
      ),
      'description' => array(
        'type' => 'text',
      ),
      'uri' => array(
      'type' =>'text',		
      ), 			
    ),
    'primary key' => array(
      0 => 'file_id',
    ),
  );	//end table array
  chado_create_custom_table('file', $schema, TRUE);
}




/**
 * This is the required update for tripal_file.
 */
function tripal_file_update_7200() {
  // EXPLANATION: as you create new releases of your module you may find that
  // tables your module created, or data may need to be adjusted. This function
  // allows you to do that. This function is executed using the
  // http://[your site]/update.php  URL or using the drush command 'updatedb'.
  // This function should be named according to the instructions provided here:
  // https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_update_N/7
  //
  // It is best not to use Tripal API calls inside of this function because an
  // upgarde from Drupal 6 to Drupal 7 requires that all modules be disabled
  // which means the Tripal API is not available.  This is an unfortunate
  // requirement, but will prevent errors during a major upgrade.

  // it is good to wrap any database changes inside of a try catch block:
  try {
   // perform database changes
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not apply updates: '. $error);
  }
}

/**
 * Implementation of hook_update_dependencies().  It specifies a list of
 * other modules whose updates must be run prior to this one.
 */
function tripal_file_update_dependencies() {
  $dependencies = array();

  // EXPLANATION: here we can specify which modules must be updated prior
  // to applying the updates in this module.  This is useful because it
  // prevents updates from being executed out of order.  The following
  // file code shows that the 'tripal_file' module update number 7200
  // must be executed after the 'tripal_cv' module's 7200 update.
  $dependencies['tripal_file'][7200] = array(
    'tripal_cv' => 7200
  );

  return $dependencies;
}
