<?php


/*
 *  	       __            /^\
    .'  \          / :.\   
   /     \         | :: \ 
  /   /.  \       / ::: | 
 |    |::. \     / :::'/  
 |   / \::. |   / :::'/
 `--`   \'  `~~~ ':'/`
         /         (    
        /   0 _ 0   \   
      \/     \_/     \/  
    -== '.'   |   '.' ==-   
      /\    '-^-'    /\    
        \   _   _   /             
       .-`-((\o/))-`-.   
  _   /     //^\\     \   _    
."o".(    , .:::. ,    )."o".  
|o  o\\    \:::::/    //o  o| 
 \    \\   |:::::|   //    /   
  \    \\__/:::::\__//    /   
   \ .:.\  `':::'`  /.:. /      
    \':: |_       _| ::'/  
 jgs `---` `"""""` `---` 
 * 
 * ITS A BUNNY OF TRUTH
 * 
 * There is an edit here IT IS ALIVE
 * 
 * 
 * 
 * 
 * 
 * http://git.drupal.org/sandbox/spficklin/2458713.git 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */



/**
 * @file
 * This file contains all Drupal hooks for the module other than any
 * node hooks and block hooks. Those go in the [module name].chado_node.inc file
 * and [module_name].blocks.inc respectively
 *
 */

// EXPLANATION: include any files needed for this module.  That includes any 
// API file, the theme file, or include files.
require('api/tripal_file.api.inc');
require('theme/tripal_file.theme.inc');
require('includes/tripal_file.admin.inc');
require('includes/tripal_file.chado_node.inc');


/**
 * Implementation of hook_permissions()
 * 
 * Set the permission types that this module uses.
 * 
 * @ingroup tripal_file
 */
function tripal_file_permission() {
  
  // EXPLANATION:  here we want to setup any of the permission types
  // that this module needs.  Our exmample module creates a new
  // chado node type called 'chado_file'.  Therefore, we need 
  // permissions to view, edit, delete, create our new node type.  Additionally,
  // we want to add a permission that allows for administration of this 
  // module.  These permissions will appear in the 'People' -> 'Permissions'
  // configuration page and allow the site admin to specify which user roles
  // are allowed to perform specific actions.
  return array(
    'access chado_file content' => array(
      'title' => t('View files'),
      'description' => t('Allow users to view file pages.'),
    ),
    'create chado_file content' => array(
      'title' => t('Create files'),
      'description' => t('Allow users to create new file pages.'),
    ),
    'delete chado_file content' => array(
      'title' => t('Delete files'),
      'description' => t('Allow users to delete file pages.'),
    ),
    'edit chado_file content' => array(
      'title' => t('Edit files'),
      'description' => t('Allow users to edit file pages.'),
    ),
    'administer tripal file' => array(
      'title' => t('Administer files'),
      'description' => t('Allow users to administer all files.'),
    ),
  );
}

/**
 * Implements hook_menu()
 * 
 * Specifies menu items and URLs used by this module.
 *
 * @ingroup tripal_file
 */
function tripal_file_menu() {
//TODO: Ask Stephen if this is good coding practice
$form['Randomshiz'] = 'goo';   
$items = array();
  
  // EXPLANATION:  the $items array should be popluated to contain a list of 
  // menu items or URL callbacks that our module needs.  
  // all Tripal Extension modules shoudl provide at least these menu items:
  //  * A menu item for an administrative home page
  //  * A menu item for 'Help' documentation
  //  * A menu item for a module configuration page
  //
  // Additionally, if your module defines a custom node type that is linked
  // to a record in Chado:
  //  * A menu item for syncing drupal nodes with Chado records.   
  //    
  
  // EXPLANATION:  all extension modules should have an administrative menu item
  // with the path set to 'admin/tripal/extension/[module name]'.  This will
  // place the menu item in the 'Tripal' -> 'Extesion Modules' page.  Because this
  // is an administrative menu item we must be sure to set the 'access arguments'
  // to be 'administer tripal file' which is a permission type we created
  // in the tripal_file_permissions() function above.
  $items['admin/tripal/extension/tripal_file'] = array(
    'title' => 'files',
    'description' => 'file module for help with development of new extension modules.',
    'page callback' => 'tripal_file_admin_files_listing',
    'access arguments' => array('administer tripal file'),
    'type' => MENU_NORMAL_ITEM,
  );

  // EXPLANATION: all extension modules should provide help documentation to 
  // describe the functionality of the module and any installation or setup
  // tasks that may be required.  The menu 'type' is MENU_LOCAL_TASK so that
  // the link appears in a tab on the extension module's administrative page.
  // here the 'page callback' specifies that we are using Drupal's theme 
  // function and the 'page_arguments' indicate the name of the template file
  // Thus, all help documentation should be provided in the 
  // [module name]/theme/tripal_file_help.tpl.php file. 
  $items['admin/tripal/extension/tripal_file/help'] = array(
    'title' => 'Help',
    'description' => 'Basic Description of Tripal Library Module Functionality',
    'page callback' => 'theme',
    'page arguments' => array('tripal_file_help'),
    'access arguments' => array('administer tripal file'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );

  // EXPLANATION: all extension modules should provide a configuration page. 
  // Even if your module does not need configuration the menu item and page
  // should be created. This helps users recognize that the module is installed
  // and working.  The configuration page can simply state that no 
  // configuration settings are available.  Typically a form is provided for the 
  // module's configuration settings. Therefore the 'page callback' uses the
  // drupal_get_form() function and the 'page argument' indicates the form
  // to call is named 'tripal_eample_admin'.  The function that describes
  // to form is in the includes/tripal_file.admin.inc file.
  $items['admin/tripal/extension/tripal_file/configuration'] = array(
    'title' => 'Settings',
    'description' => 'Configure the Tripal Library module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_file_admin'),
    'access arguments' => array('administer tripal file'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );
  
  // EXPLANATION: If your module defines a new chado node type and that node
  // type directly links to a record in Chado, then you can use the Tripal API
  // to quickly provide syncing functionality.  See the API documentation here
  // for more information on how that is setup:
  // http://api.tripal.info/api/tripal/tripal_core%21api%21tripal_core.chado_nodes.api.inc/function/chado_node_sync_form/2.x
  $items['admin/tripal/extension/tripal_file/sync'] = array(
    'title' => ' Sync',
    'description' => 'Create pages on this site for files stored in Chado',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chado_node_sync_form', 'tripal_file', 'chado_file'),
    'access arguments' => array('administer tripal file'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );
  
  //custom file form
  $items['fileform'] = array(
  		'title' => ' EnterFile',
  		'description' => 'Add a file to the database, go on, I dare you',
  		'page callback' => 'drupal_get_form',
  		'page arguments' => array('tripal_file_form'),
  		'access arguments' => array('administer tripal file'),
  		'type' => MENU_NORMAL_ITEM,
  		'weight' => 2
  );
  
  // EXPLANATION: If your module defines a new node type that uses the default
  // table of contents (left-side bar of content panes on a page). Then a 
  // 'TOC' link will automatically appear on the node page to allow for 
  // customization of the TOC.  However those customizations are only node
  // specific.  To provide a tab in the module's administrative pages add the
  // following menu item. This menu will provide a form similar to the one
  // found on the node that allows the user to set global TOC settings for the
  // content type.  Be sure to always use a menu path of the form:
  //   admin/tripal/chado/[module name]/[content type name]_toc
  // this allows for a module to support TOC management when there are multiple
  // content types provided by the module, as the content type is specified
  // in the menu path.
  $items['admin/tripal/chado/tripal_file/chado_file_toc'] = array(
    'title' => ' TOC',
    'description' => 'Manage the table of contents for file nodes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_core_content_type_toc_form', 'chado_file'),
    'access arguments' => array('administer tripal file'),
    'type' => MENU_LOCAL_TASK,
    'file' =>  'includes/tripal_core.toc.inc',
    'file path' => drupal_get_path('module', 'tripal_core'),
    'weight' => 3
  );
  
  return $items;
}

/**
 * Implements hook_views_api()
 * 
 * This hook tells drupal that there is views support for
 * for this module which then automatically includes the tripal_db.views.inc 
 * where all the views integration code is found.
 *
 * @ingroup tripal_file
 */
function tripal_file_views_api() {
  return array(
    'api' => 3.0,
  );
}

/*
 * I need to make two file forms, one is for the organism page, and one is for the default file form
 * This form will insure that the porper node id and node type is aquired, in order to 
 * obtain the correct linker table
 * Here, The node ID will be quietly passed along to the form's 'accessed from'
 * index
 * Node Content should describe the specific species the file will describe
 */
function tripal_file_form_Append($form, &$form_state, $node_id, $node_type)
{
	$form['tripal_file_format'] = array(
		'#title' => t('File Form'),
		'#type' => 'fieldset', 
		'#collapsible' => TRUE,		
	);
	$form['tripal_file_format']['tripal_file_type_id'] = array(
		'#title' => t('Type Id'),	
		'#type' => 'select',
		'#options' => array(
			1 => t('Text'),
			2 => t('Fasta'),
			3 => t('VCF'),
			4 => t('GFF3'),				
		),
		'#size' => 1,
		'#required' => TRUE,					
	);
	$form['tripal_file_format']['tripal_file_description'] = array(
		'#title' => t('Enter Description'),	
		'#type' => 'textarea',	
		'#size' => 60, 	
	);
	$form['tripal_file_format']['tripal_file_uri'] = array(
		'#title' => t('Enter Valid URI for file'),
		'#type' => 'textfield', 
		'#size' => 50,
		'#default_value'=> ' ',	
		'#required' => TRUE,
	);
	
	// pass the node id where infromation was obtained
	$form['tripal_file_format']['tripal_file_node_id'] = array (
	'#type' => 'hidden',
	'#value' => $node_id, 				
	);
	
	// Pass node type where infromation was obtained from, this will help
	// Access the correct linker table
	$form['tripal_file_format']['tripal_file_node_type'] = array (
			'#type' => 'hidden',
			'#value' => $node_type,
	);
	
	

	//These functions are necessary to specify where the default submit and validate is
	$form['#submit'][]= 'tripal_file_form_submit';
	$form['#validate'][]='tripal_file_form_validate';
	
	return $form;
}
/*
 * I need to make two file forms, one is for the organism page, and one is for the default file form
 * This one will be for the DEFAULT file form url.
 * In the default file form URL I must ask users for the file content
 * 
 * 
 * DO NOT USE THIS FUNCTION
 */
function tripal_file_form($form, &$form_state)
{
	$form['tripal_file_format'] = array(
			'#title' => t('File Form'),
			'#type' => 'fieldset',
			'#collapsible' => TRUE,
	);
	$form['tripal_file_format']['tripal_file_type_id'] = array(
			'#title' => t('Type Id'),
			'#type' => 'select',
			'#options' => array(
					1 => t('Text'),
					2 => t('Fasta'),
					3 => t('VCF'),
					4 => t('GFF3'),
			),
			'#size' => 1,
			'#required' => TRUE,
	);
	$form['tripal_file_format']['tripal_file_description'] = array(
			'#title' => t('Enter Description'),
			'#type' => 'textarea',
			'#size' => 60,
	);
	$form['tripal_file_format']['tripal_file_uri'] = array(
			'#title' => t('Enter Valid URI for file'),
			'#type' => 'textfield',
			'#size' => 50,
			'#default_value'=> ' ',
			'#required' => TRUE,
	);
	//dpm($form['file_form_type']=='non_existant');
	
	//This is the main difference between the default form and the
	//form used by the features table, the default form must ask the user for the
	//File contents
	$form['tripal_file_format']['tripal_file_node_id'] = array (
			'#title' => t('File Content'),
			'#type' => 'select',
			'#options' => array(
					1 => t('Organism'),
					2 => t('Analysis'),
					3 => t('TODO'),
					4 => t('TODO'),
			),
			'#size' => 1,
			'#required' => TRUE,
	);
	$form['tripal_file_format']['submit'] = array(
		'#type'=> 'submit',
		'#value' => t('Add item to table'),
	 );
	return $form;
}

/*
 * A validation function for cusom forms, ensures a valid URI
 */
function tripal_file_form_validate($form, &$form_state)
{
	$myString = $form['tripal_file_format']['tripal_file_uri']['#value'];
	//dpm($myString);
	if(fopen($myString,"r")===FALSE)
	{
		form_set_error('URI', t('You must enter a valid file URI'));
		return FALSE;
	}
	//tripal_
	return TRUE; 
}


function tripal_file_form_submit($form, &$form_state) {
	//The standard values
 	$fields=array (
		'type_id' => &$form['tripal_file_format']['tripal_file_type_id']['#value'],
		'description' => &$form['tripal_file_format']['tripal_file_description']['#value'],
		'uri' => &$form['tripal_file_format']['tripal_file_uri']['#value'],
 						
	);
 	//Insert into the file table
 	tripal_core_chado_insert('file',$fields);
 	
 	//The tripal_dile_node_type will determine what type of linker file is utilized
 	switch($form['tripal_file_format']['tripal_file_node_type']) {
	  case 'chado_organism':
 	  //Grab the id of the node submitting the file
 	  $organism_id = $form['tripal_file_format']['tripal_file_node_id'];
 	  $organismFilefields = array(
 	  	'file_id' => 'TODO',//Get file from TABLE WHERE 
 	  	'organism_id' => $organism_id,	
 	); 
 	// Insert these fields into the linker table  
 	tripal_core_chado_insert('organism_file',$organismFilefields);
	break;
	default:
	break;
 	};
 
 	
	drupal_set_message(t('File has been added')); 
} 

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_file
 */
function tripal_file_theme($existing, $type, $theme, $path) {
  $core_path = drupal_get_path('module', 'tripal_core');

  // EXPLANATION: this function defines all of the functions and templates
  // that this module needs to provide content.  These details are provided
  // in the form of an array the indicates which functions or templates
  // provide content.  Please see the Drupal theming guide for an in-depth
  // description for how theming works in Drupal:
  // https://drupal.org/documentation/theme
  
  $items = array(
    
    // EXPLANATION:  If this module defines a new node type that displays
    // Chado data then we should use Tripal's default node template.  This
    // template ensures that all content provided by Tripal and Tripal 
    // extension modules has the same look and feel.  It is designed to be
    // generic such that it won't intefer with the look-and-feel of the default
    // theme.  This generic template will organize the node into a table
    // of contents found on the left-side of the page and place the content
    // in the center of the page.  User's will cycle through content on the 
    // page by clicking the links in the table of contents. If you do not want
    // to use the default Tripal template you can change this array to your
    // liking.
    'node__chado_file' => array(
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme/templates",
    ),

    // EXPLANATION: the following defines all of the template files used for
    // this module. Templates are named with underscores separating words, and
    // correspond directly to a file with the extension '.tpl.php'. For file
    // the 'tripal_file_base' template will have a corresponding
    // tripal_file_base.tpl.php file where the display code is housed.
    // The only required templates are the 'base',  'help' and 'teaseer' templates.
    // The base template provides the basic information about the record in 
    // in Chado.  The 'help' template provides the adminstrative help documenation,
    // and the teaser provides a brief summary of the record that can be used
    // as short description of the record in aggregated lists.
    
    // the base template
    'tripal_file_base' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_file_base',
      'path' => "$path/theme/templates",
    ),
    // the help template
    'tripal_file_help' => array(
      'template' => 'tripal_file_help',
      'variables' =>  array(NULL),
      'path' => "$path/theme/templates",
    ),
    // the teaser template.
    'tripal_file_teaser' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_file_teaser',
      'path' => "$path/theme/templates",
    ),
    
    
    // EXPLANATION: Typically, a different template is created for each subset of data.
    // for file, most Chado tables have a 'XXXXprop', 'XXXX_cvterm',
    // 'XXXX_dbxref', 'XXXX_synonyms', 'XXXX_relationships' tables. Therefore,
    // a template is created to display data from each of these tables.
    
    'tripal_file_properties' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_file_properties',
      'path' => "$path/theme/templates",
    ),
    'tripal_file_references' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_file_references',
      'path' => "$path/theme/templates",
    ),
    'tripal_file_relationships' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_file_relationships',
      'path' => "$path/theme/templates",
    ),

    // EXPLANATION: sometimes a module may want to add content to another
    // modules' node types. For file, the feature module does this by
    // adding a 'feature summary' data to an organism.  To add data to another
    // module's node, the templates belong to this module and are 
    // specified in the same way as above.  However, the naming of the 
    // template is changed to include the name of the module that supplies
    // the node type followed by our record name: 

    // tripal_organism templates
    'tripal_file_generic' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_file_generic',
      'path' => "$path/theme/templates",
    ),
  );
  
  return $items;
}

/**
 * Implements hook_help()
 * 
 * Adds a help $formpage to the module list
 */
function tripal_file_help ($path, $arg) {
  
  // EXPLANATION: in the tripal_file_menu() function above we created 
  // a menu item for the help documentation.  The menu item specified 
  // a function that should be called when the menu item is clicked.  This 
  // is that function.  But, rather than place HTML code in this function
  // we want to have our help documentation in a template file.  We 
  // specified in the tripal_file.theme() function that we have a template
  // file so now we want to use get the contents of that template file and
  // return it.
  if ($path == 'admin/help#tripal_file') {
    return theme('tripal_file_help', array());
  }
}


/**
 * Implements hook_cron()
 *
 * @ingroup tripal_file
 */
function tripal_file_cron() {

  // EXPLANATION: here we can add any code that needs to be executed when
  // the Drupal cron is run.
}


/**
 * Implementation of hook_form_alter()
 * 
 * Allows a module to alter any form prior to it being rendered. For more
 * details about Drupal's Form API see this page:
 * 
 * https://api.drupal.org/api/drupal/includes!form.inc/group/form_api/7
 *
 */
function tripal_file_form_alter(&$form, &$form_state, $form_id) {
  
	dpm($form);
	if ($form['#node']-> type == 'chado_organism') {
		$node_id = $form['#node']-> vid;
		$node_type = $form['#node']-> type; 
		//Setting the file form type to organism will tell the file form to acheive 
		//infromation from the organism node
		//$form['file_form_type'] = 'Organism';
		$form = tripal_file_form_Append($form, $form_state, $node_id, $node_type);   
   		
  }
}
